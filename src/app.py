import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import os
import sys
sys.path.append("utils")
from utils import load_csv
from predictor import predict_lstm, predict_xgb

# C·∫•u h√¨nh trang
st.set_page_config(page_title="Stock Viewer", layout="wide")
st.title("üìà ·ª®ng d·ª•ng ph√¢n t√≠ch c·ªï phi·∫øu")

# Dropdown ch·ªçn c·ªï phi·∫øu
stock_map = {"FPT": "fpt", "VNM": "vnm", "HPG": "hpg"}
stock_choice = st.selectbox("Ch·ªçn c·ªï phi·∫øu", list(stock_map.keys()))

# Load d·ªØ li·ªáu
symbol = stock_map[stock_choice]
file_path = f"../data/clean/{symbol}.csv"

try:
    df = load_csv(file_path)
except Exception as e:
    st.error(f"‚ùå L·ªói khi load d·ªØ li·ªáu: {e}")
    st.stop()

# Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu
st.subheader(f"D·ªØ li·ªáu c·ªï phi·∫øu {stock_choice}")
st.dataframe(df)

# Bi·ªÉu ƒë·ªì Close theo th·ªùi gian
st.subheader("Bi·ªÉu ƒë·ªì gi√° ƒë√≥ng c·ª≠a theo th·ªùi gian")
if 'date' in df.columns:
    df['date'] = pd.to_datetime(df['date'])
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(df['date'], df['close'], label="Close", linewidth=2)
    ax.set_xlabel("Th·ªùi gian")
    ax.set_ylabel("Gi√° ƒë√≥ng c·ª≠a")
    ax.set_title(f"Gi√° ƒë√≥ng c·ª≠a c·ªßa {stock_choice}")
    ax.grid(True)
    ax.legend()
    st.pyplot(fig)
else:
    st.warning("Kh√¥ng t√¨m th·∫•y c·ªôt 'date' trong d·ªØ li·ªáu.")

# D·ª± ƒëo√°n gi√° ƒë√≥ng c·ª≠a
st.subheader("D·ª± ƒëo√°n gi√° ƒë√≥ng c·ª≠a theo ng√†y")
input_date = st.date_input("Ch·ªçn ng√†y c·∫ßn d·ª± ƒëo√°n")
model_type = st.selectbox("Ch·ªçn m√¥ h√¨nh d·ª± ƒëo√°n", ["LSTM", "XGB"])

if model_type == "LSTM":
    price, error = predict_lstm(symbol, input_date)
    if error:
        st.warning(error)
    else:
        st.success(f"‚úÖ [LSTM] Gi√° d·ª± ƒëo√°n cho ng√†y {input_date.strftime('%d/%m/%Y')} l√† **{price:,.2f}** ngh√¨n VND.")
elif model_type == "XGB":
    if symbol == "fpt":
        st.warning("‚ö†Ô∏è M√¥ h√¨nh XGB kh√¥ng ho·∫°t ƒë·ªông t·ªët v·ªõi c·ªï phi·∫øu FPT. K·∫øt qu·∫£ c√≥ th·ªÉ sai l·ªách l·ªõn.")

    price, error = predict_xgb(symbol, input_date)
    if error:
        st.warning(error)
    else:
        st.success(f"‚úÖ [XGB] Gi√° d·ª± ƒëo√°n cho ng√†y {input_date.strftime('%d/%m/%Y')} l√† **{price:,.2f}** ngh√¨n VND.")
